<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        KVQAAAAASUVORK5CYII=
</value>
  </data>
</root>