<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        1fFXFa4+ZZEaHPQAAAAASUVORK5CYII=
</value>
  </data>
</root>