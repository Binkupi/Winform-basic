<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>